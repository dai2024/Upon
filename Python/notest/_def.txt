import struct

class Uint16:
    def __init__(self, value):
        self.value = value

    def pack(self, byteorder='big'):
        return struct.pack('>' if byteorder == 'big' else '<', self.value)

    @classmethod
    def unpack(cls, packed_bytes, byteorder='big'):
        value = struct.unpack('>' if byteorder == 'big' else '<', packed_bytes)[0]
        return cls(value)

class Uint8:
    def __init__(self, value):
        self.value = value

    def pack(self):
        return struct.pack('B', self.value)

    @classmethod
    def unpack(cls, packed_bytes):
        value = struct.unpack('B', packed_bytes)[0]
        return cls(value)

class Int16:
    def __init__(self, value):
        self.value = value

    def pack(self, byteorder='big'):
        return struct.pack('>' if byteorder == 'big' else '<', self.value)

    @classmethod
    def unpack(cls, packed_bytes, byteorder='big'):
        value = struct.unpack('>' if byteorder == 'big' else '<', packed_bytes)[0]
        return cls(value)

class Int8:
    def __init__(self, value):
        self.value = value

    def pack(self):
        return struct.pack('b', self.value)

    @classmethod
    def unpack(cls, packed_bytes):
        value = struct.unpack('b', packed_bytes)[0]
        return cls(value)
